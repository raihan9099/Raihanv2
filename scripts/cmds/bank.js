// Command: bank.js
// Version: 5.0
// Author: Mahi-- & Gemini
// System Context: Wednesday, June 11, 2025 - Bangladesh Time (+06)

const { MongoClient, ObjectId } = require("mongodb");
const { createCanvas, registerFont, loadImage } = require('canvas');
const fs = require('fs-extra');
const path = require('path');
const axios = require('axios');
const crypto = require('crypto');

const AI_MANAGER_PROMPT = `
Your identity is the Anchestor Bank AI Manager. Your entire knowledge is strictly limited to the features and live market data of the Anchestor Bank system.

Core Knowledge Base (Your entire world):
- Bank Name: Anchestor Bank
- Account functions: Balance, deposit, withdraw, transfer, interest, statements, net worth, credit score, detailed reports.
- ATM Interface: A visual, PIN-protected menu for transactions. Requires a debit card. Users can change their PIN.
- Stock Market & IPOs: You have live data on fictional shares. You can analyze trends, offer suggestions, and provide info on Initial Public Offerings (IPOs).
- Businesses & Marketplace: Users can buy businesses for passive income and trade properties on a player-to-player marketplace.
- Insurance, Government Bonds, Cheques, Investments, Loans, Daily Rewards, Tiers with Perks, Market Events (including corporate buyouts).

CRITICAL RULES:
1.  You ONLY answer questions directly related to the Core Knowledge Base and the provided market data.
2.  You provide financial analysis and suggestions based on the data.
3.  If a user asks about anything outside of this world (e.g., real-world events, your identity as an AI), you MUST politely decline. Your required response for refusal is: "I'm sorry sir/ma'am, my expertise is limited to Anchestor Bank services. How may I assist you with your account today?"
4.  You MUST NOT identify as an AI or a large language model. You are the Anchestor Bank AI Manager.
5.  Your tone is always formal, professional, and helpful.
6.  Do not use markdown formatting (like asterisks for bolding).
`;

try {
    const fontPath = path.join(__dirname, '..', 'assets', 'Arial.ttf');
    if (fs.existsSync(fontPath)) registerFont(fontPath, { family: 'Arial' });
} catch (e) { console.log("Custom font not found or failed to load. Using system default 'Arial'."); }

const mongoUri = "mongodb+srv://Easirmahi:01200120mahi@anchestor.wmvrhcb.mongodb.net";
const DB_NAME = "GoatBotV2_AdvBank";
const BANK_COLLECTION = "advBankData";
const MARKET_COLLECTION = "advMarketListings";
const AUDIT_COLLECTION = "advBankAuditLogs";
const STOCK_TRANSACTION_FEE_PERCENT = 0.0015;

let stockMarket = {
    "AAPL": { name: "Apple Inc.", price: 170.00, openPrice: 170.00, history: Array(50).fill(170.00), trend: 0.001, volatility: 0.03 },
    "MSFT": { name: "Microsoft Corp.", price: 300.00, openPrice: 300.00, history: Array(50).fill(300.00), trend: 0.0008, volatility: 0.025 },
    "GOOGL": { name: "Alphabet Inc.", price: 2800.00, openPrice: 2800.00, history: Array(50).fill(2800.00), trend: 0.0012, volatility: 0.035 },
    "TSLA": { name: "Tesla Inc.", price: 750.00, openPrice: 750.00, history: Array(50).fill(750.00), trend: 0.002, volatility: 0.08 },
    "BOTC": { name: "BotCoin", price: 12.00, openPrice: 12.00, history: Array(50).fill(12.00), trend: 0.005, volatility: 0.15 },
    "OILX": { name: "Global Oil Exchange", price: 75.00, openPrice: 75.00, history: Array(50).fill(75.00), trend: 0.0009, volatility: 0.05 },
};
const propertyAssets = [ { id: "SUB_APT", name: "Suburban Apartment", price: 75000, dailyRent: 25 }, { id: "CITY_CONDO", name: "City Center Condo", price: 250000, dailyRent: 80 }, { id: "BEACH_HOUSE", name: "Beachfront House", price: 800000, dailyRent: 200 }];
const availableBusinesses = [ { id: "CAFE", name: "Anchestor Cafe", cost: 150000, baseIncome: 200 }, { id: "ARCADE", name: "Retro Arcade", cost: 500000, baseIncome: 750 }, { id: "TECH_STARTUP", name: "AI Tech Startup", cost: 2500000, baseIncome: 4000 } ];
const investmentOptions = [ { id: "BOND_LOW", name: "Govt. Savings Bond", type: "bond", interestRate: 0.025, riskLevel: "Low", durationDays: 30, minAmount: 500 }, { id: "TECH_FUND", name: "Tech Growth Fund", type: "fund", avgReturn: 0.08, riskLevel: "High", durationDays: 90, minAmount: 5000 }];
let marketEvent = null;
let currentIpo = null;

function triggerEvent() { if (marketEvent && Date.now() > marketEvent.endTime) marketEvent = null; if (currentIpo && Date.now() > currentIpo.endTime) { stockMarket[currentIpo.symbol] = { name: currentIpo.name, price: currentIpo.price, openPrice: currentIpo.price, history: Array(50).fill(currentIpo.price), trend: (Math.random() - 0.4) * 0.001, volatility: 0.05 }; currentIpo = null; } if (!marketEvent && !currentIpo && Math.random() < 0.05) { const eventTypes = ['market', 'ipo', 'buyout']; const chosenEventType = eventTypes[Math.floor(Math.random() * eventTypes.length)]; if (chosenEventType === 'market') { const events = [ { name: "Bull Market", effect: 0.001, duration: 3600000 * 2, type: 'market' }, { name: "Recession Scare", effect: -0.002, duration: 3600000 * 3, type: 'market' } ]; marketEvent = events[Math.floor(Math.random() * events.length)]; marketEvent.endTime = Date.now() + marketEvent.duration; } else if (chosenEventType === 'ipo') { const newSymbol = String.fromCharCode(65 + Math.floor(Math.random() * 26)) + String.fromCharCode(65 + Math.floor(Math.random() * 26)) + String.fromCharCode(65 + Math.floor(Math.random() * 26)) + 'X'; if (!stockMarket[newSymbol]) { currentIpo = { symbol: newSymbol, name: "New Tech Ventures", price: parseFloat((Math.random() * 100 + 20).toFixed(2)), duration: 3600000 * 4, type: 'ipo' }; currentIpo.endTime = Date.now() + currentIpo.duration; } } else if (chosenEventType === 'buyout') { const businessToBuyout = availableBusinesses[Math.floor(Math.random() * availableBusinesses.length)]; marketEvent = { name: `Corporate Buyout of ${businessToBuyout.name}`, type: 'buyout', businessId: businessToBuyout.id, premium: 1.5, duration: 3600000 * 1 }; marketEvent.endTime = Date.now() + marketEvent.duration; } } }
setInterval(triggerEvent, 3600000);
function updateStockPrices() { for (const symbol in stockMarket) { const stock = stockMarket[symbol]; let marketEffect = (marketEvent && marketEvent.type === 'market') ? (marketEvent.sector ? (marketEvent.sector.includes(symbol) ? marketEvent.effect : 0) : marketEvent.effect) : 0; let noise = (Math.random() - 0.5) * 2; let changePercent = (stock.trend || 0) + marketEffect + (noise * stock.volatility); let newPrice = stock.price * (1 + changePercent); stock.price = parseFloat(Math.max(0.01, newPrice).toFixed(2)); stock.dailyChange = ((stock.price - stock.openPrice) / stock.openPrice) * 100; stock.history.push(stock.price); if (stock.history.length > 50) stock.history.shift(); } }
setInterval(updateStockPrices, 15000);

function formatKMB(a,b=!0,c=2){if(isNaN(parseFloat(a)))return b?"$0.00":"0.00";a=parseFloat(a);const d=0>a?"-":"";a=Math.abs(a);let e="";return 1e12<=a?(a/=1e12,e="T"):1e9<=a?(a/=1e9,e="B"):1e6<=a?(a/=1e6,e="M"):1e3<=a&&(a/=1e3,e="K"),`${d}${b?"$":""}${a.toFixed(c)}${e}`}
function toBoldUnicode(t){const o={"a":"𝐚","b":"𝐛","c":"𝐜","d":"𝐝","e":"𝐞","f":"𝐟","g":"𝐠","h":"𝐡","i":"𝐢","j":"𝐣","k":"𝐤","l":"𝐥","m":"𝐦","n":"𝐧","o":"𝐨","p":"𝐩","q":"𝐪","r":"𝐫","s":"𝐬","t":"𝐭","u":"𝐮","v":"𝐯","w":"𝐰","x":"𝐱","y":"𝐲","z":"𝐳","A":"𝐀","B":"𝐁","C":"𝐂","D":"𝐃","E":"𝐄","F":"𝐅","G":"𝐆","H":"𝐇","I":"𝐈","J":"𝐉","K":"𝐊","L":"𝐋","M":"𝐌","N":"𝐍","O":"𝐎","P":"𝐏","Q":"𝐐","R":"𝐑","S":"𝐒","T":"𝐓","U":"𝐔","V":"𝐕","W":"𝐖","X":"𝐗","Y":"𝐘","Z":"𝐙","0":"𝟎","1":"𝟏","2":"𝟐","3":"𝟑","4":"𝟒","5":"𝟓","6":"𝟔","7":"𝟕","8":"𝟖","9":"𝟗"};return String(t).split("").map(t=>o[t]||t).join("")}
let mongoClient;
async function getDb(){if(!mongoClient||!mongoClient.topology||!mongoClient.topology.isConnected())mongoClient=new MongoClient(mongoUri),await mongoClient.connect();return mongoClient.db(DB_NAME)}
async function getUserBankData(d,b){const a=b.collection(BANK_COLLECTION);let c=await a.findOne({userId:String(d)});if(!c){const e=new Date;c={userId:String(d),bank:0,lastInterestClaimed:e,loan:{amount:0,history:{repaid:0},dueDate:null},card:{number:null,pin:null},lastDailyClaimed:null,lastLoanWarning:null,creditScore:500,stocks:[],investments:[],properties:[],businesses:[],cheques:{issued:[],received:[]},transactionHistory:[],insurance:[],messages:[],callLog:[],gallery:[],wallpaperUrl:null,pinReset:{code:null,expires:null},report:{earned:0,spent:0,interest:0,rent:0,cheques:0,lastReset:e},createdAt:e,updatedAt:e},await a.insertOne(c)}c.card=c.card||{number:null,pin:null};c.lastDailyClaimed=c.lastDailyClaimed||null;c.loan=c.loan||{amount:0,history:{repaid:0}};c.loan.history=c.loan.history||{repaid:0};c.creditScore=c.creditScore||500;c.insurance=c.insurance||[];c.businesses=c.businesses||[];c.properties=c.properties||[];c.messages=c.messages||[];c.callLog=c.callLog||[];c.gallery=c.gallery||[];c.pinReset=c.pinReset||{code:null,expires:null};c.report=c.report||{earned:0,spent:0,interest:0,rent:0,cheques:0,lastReset:new Date()};return c}
async function updateUserBankData(c,b,a){b.updatedAt=new Date,await a.collection(BANK_COLLECTION).updateOne({userId:String(c)},{$set:b},{upsert:!0})}
async function addTransaction(e,d,c,b,a){const f={type:d,description:c,amount:b,date:new Date};await a.collection(BANK_COLLECTION).updateOne({userId:String(e)},{$push:{transactionHistory:{$each:[f],$slice:-50}}})}
async function logAudit(db, type, event, details = {}) { await db.collection(AUDIT_COLLECTION).insertOne({ type, userId: String(event.senderID), timestamp: new Date(), ...details }); }
async function calculateCreditScore(c,b){let a=300;const d=(c.bank||0)+b,e=(new Date-new Date(c.createdAt))/864e5;return a+=Math.min(150,5*Math.floor(e/30)),a+=Math.min(150,Math.floor(d/1e4)),a+=25*(c.loan.history.repaid||0),c.loan.amount>0&&(a-=50),a+=Math.min(100,(c.transactionHistory||[]).length),Math.max(300,Math.min(850,a))}
function getTierPerks(a){if(a>=1e8)return{tier:"💎 Platinum",feeModifier:.5,interestBonus:.002};if(a>=1e7)return{tier:"🥇 Gold",feeModifier:.7,interestBonus:.001};if(a>=1e6)return{tier:"🥈 Silver",feeModifier:.85,interestBonus:0};return{tier:"🥉 Bronze",feeModifier:1,interestBonus:0}}
function wrapText(e,d,c,b,a,f){const g=d.split("\n");for(const h of g){let i=h.split(" "),j="";for(let k=0;k<i.length;k++){let l=j+i[k]+" ";e.measureText(l).width>a&&k>0?(e.fillText(j.trim(),c,b),j=i[k]+" ",b+=f):j=l}e.fillText(j.trim(),c,b),b+=f}}
function safeEval(expression) { try { const sanitized = String(expression).replace(/[^-()\d/*+.]/g, ''); return new Function(`return ${sanitized}`)(); } catch (e) { return null; } }

// --- Canvas Drawing Functions ---
const FONT_FAMILY = 'Arial';
function fillRoundRect(ctx, x, y, width, height, radius) { if (typeof radius === 'number') radius = { tl: radius, tr: radius, br: radius, bl: radius }; else { const dR = { tl: 0, tr: 0, br: 0, bl: 0 }; for (let s in dR) radius[s] = radius[s] || dR[s]; } ctx.beginPath(); ctx.moveTo(x + radius.tl, y); ctx.lineTo(x + width - radius.tr, y); ctx.quadraticCurveTo(x + width, y, x + width, y + radius.tr); ctx.lineTo(x + width, y + height - radius.br); ctx.quadraticCurveTo(x + width, y + height, x + width - radius.br, y + height); ctx.lineTo(x + radius.bl, y + height); ctx.quadraticCurveTo(x, y + height, x, y + height - radius.bl); ctx.lineTo(x, y + radius.tl); ctx.quadraticCurveTo(x, y, x + radius.tl, y); ctx.closePath(); ctx.fill(); }
async function drawModernAtmCanvas(c,d){const a=600,e=800,b=createCanvas(a,e),f=b.getContext("2d");f.fillStyle="#1d1f21",f.fillRect(0,0,a,e);const g=f.createLinearGradient(0,0,a,e);g.addColorStop(0,"#282c34"),g.addColorStop(1,"#21252b"),f.fillStyle=g,f.fillRect(10,10,a-20,e-20),f.fillStyle="#7289DA",f.fillRect(10,10,a-20,90),f.shadowColor="black",f.shadowBlur=15,f.fillStyle="#FFFFFF",f.font="bold 36px Arial",f.textAlign="center",f.textBaseline="middle",f.fillText("ANCHESTOR BANK",a/2,55),f.shadowBlur=0;const h=30,i=120,j=a-60,k=500;f.fillStyle="#0c1014",f.fillRect(h,i,j,k),f.strokeStyle="#7289DA",f.lineWidth=4,f.strokeRect(h,i,j,k),f.fillStyle="#E0E0E0",f.font="20px Arial",f.textAlign="left",f.fillText(`Welcome, ${d.userName}`,h+20,i+35),f.textAlign="center";const l=h+j/2;if("main_menu"===c.screen){const m=["Balance Inquiry","Cash Withdrawal","Fast Cash ($500)","Cash Deposit","Funds Transfer","Mini Statement"];f.font="bold 26px Arial",f.fillStyle="#FFFFFF",f.fillText("Main Menu",l,i+80),f.font="22px Arial",f.textAlign="left",m.forEach((b,c)=>{f.fillStyle="#7289DA",f.fillText(`${c+1}.`,h+40,i+140+60*c),f.fillStyle="#FFFFFF",f.fillText(b,h+80,i+140+60*c)})}else"balance"===c.screen?(f.font="bold 28px Arial",f.fillStyle="#FFFFFF",f.fillText("Available Balance",l,i+180),f.font="bold 48px Arial",f.fillStyle="#43B581",f.fillText(d.balance,l,i+260)):"prompt"===c.screen?(f.font="bold 28px Arial",f.fillStyle="#FFFFFF",wrapText(f,d.message,l,i+220,j-80,40)):"receipt"===c.screen&&(f.font="bold 28px Arial",f.fillStyle=d.isError?"#F04747":"#43B581",f.fillText(d.title,l,i+80),f.font="22px Arial",f.fillStyle="#FFFFFF",wrapText(f,d.message,l,i+150,j-80,35));f.fillStyle="#4A4A4A",f.fillRect(10,e-120,a-20,110),f.fillStyle="#99AAB5",f.font="16px Arial",f.textAlign="center",f.fillText(c.footerMessage,a/2,e-65);const m=path.join(__dirname,"..","cache");await fs.ensureDir(m);const n=path.join(m,`atm_${Date.now()}.png`),o=fs.createWriteStream(n);return b.createPNGStream().pipe(o),await new Promise((a,b)=>{o.on("finish",a),o.on("error",b)}),fs.createReadStream(n)}
async function drawStockMarketCanvas(b){const c=6,d=Object.keys(stockMarket),a=Math.ceil(d.length/c);b=Math.max(1,Math.min(b,a));const e=(b-1)*c,f=d.slice(e,e+c),g=550,h=90,i=60,j=40,k=i+f.length*h+j,l=createCanvas(g,k),m=l.getContext("2d");m.fillStyle="#1A202C",m.fillRect(0,0,g,k),m.fillStyle="#2D3748",m.fillRect(0,0,g,i),m.fillStyle="#E2E8F0",m.font="bold 24px Arial",m.textAlign="center",m.textBaseline="middle",m.fillText("Anchestor Stock Exchange",g/2,i/2);let n=i+5;for(const o of f){const p=stockMarket[o];m.fillStyle="#2D3748",m.fillRect(10,n,g-20,h-5),m.fillStyle="#E2E8F0",m.font="bold 18px Arial",m.textAlign="left",m.fillText(`${o} • ${p.name}`,25,n+30),m.font="16px Arial",m.fillText(`Price: ${formatKMB(p.price)}`,25,n+60);const q=(p.dailyChange||0).toFixed(2);m.fillStyle=0<=(p.dailyChange||0)?"#48BB78":"#F56565",m.textAlign="right",m.font="bold 20px Arial",m.fillText(`${0<=(p.dailyChange||0)?"▲":"▼"} ${q}%`,g-25,n+45),n+=h}m.fillStyle="#2D3748",m.fillRect(0,k-j,g,j),m.fillStyle="#99AAB5",m.font="16px Arial",m.textAlign="center",m.fillText(`Page ${b} of ${a}`,g/2,k-j/2);const o=path.join(__dirname,"..","cache");await fs.ensureDir(o);const p=path.join(o,`stock_market_${Date.now()}.png`),q=fs.createWriteStream(p);return l.createPNGStream().pipe(q),await new Promise(a=>q.on("finish",a)),fs.createReadStream(p)}
async function drawStockPortfolioCanvas(c,a,d){const e=c.stocks;if(!e||0===e.length)return null;const f=550,g=100,h=60,b=h+e.length*g+20,i=createCanvas(f,b),j=i.getContext("2d");j.fillStyle="#1A202C",j.fillRect(0,0,f,b),j.fillStyle="#2D3748",j.fillRect(0,0,f,h),j.fillStyle="#E2E8F0",j.font="bold 22px Arial",j.textAlign="center",j.textBaseline="middle";const k=await a.getName(d)||"User";j.fillText(`${k}'s Stock Portfolio`,f/2,h/2);let l=h+10;for(const m of e){const n=stockMarket[m.symbol];if(!n)continue;const o=n.price*m.shares,p=m.avgBuyPrice*m.shares,q=o-p,r=0!==p?100*q/p:0;j.fillStyle="#2D3748",j.fillRect(10,l,f-20,g-10),j.fillStyle="#E2E8F0",j.font="bold 18px Arial",j.textAlign="left",j.fillText(`${m.symbol} • ${n.name}`,25,l+25),j.font="14px Arial",j.fillText(`${m.shares} shares @ avg ${formatKMB(m.avgBuyPrice)}`,25,l+50),j.fillText(`Value: ${formatKMB(o)}`,25,l+70),j.font="bold 16px Arial",j.textAlign="right",j.fillStyle=0<=q?"#48BB78":"#F56565",j.fillText(`${0<=q?"+":""}${r.toFixed(2)}%`,f-25,l+35),j.font="14px Arial",j.fillText(`P/L: ${formatKMB(q)}`,f-25,l+60),l+=g}const s=path.join(__dirname,"..","cache");await fs.ensureDir(s);const t=path.join(s,`stock_portfolio_${d}_${Date.now()}.png`),u=fs.createWriteStream(t);return i.createPNGStream().pipe(u),await new Promise(a=>u.on("finish",a)),fs.createReadStream(t)}
async function drawFinancialReportCanvas(d,c,a){const b=550,e=700,f=createCanvas(b,e),g=f.getContext("2d");g.fillStyle="#1A202C",g.fillRect(0,0,b,e),g.fillStyle="#2D3748",g.fillRect(0,0,b,60),g.fillStyle="#E2E8F0",g.font="bold 24px Arial",g.textAlign="center",g.textBaseline="middle";const h=await c.getName(a)||"User";g.fillText(`${h}'s Financial Report`,b/2,30);const i=d.bank||0,j=await c.get(a,"money")||0,k=(d.stocks||[]).reduce((a,b)=>a+(stockMarket[b.symbol]?.price||0)*b.shares,0),l=(d.businesses||[]).reduce((a,b)=>{const c=availableBusinesses.find(a=>a.id===b.businessId);return a+(c?.cost||0)},0),m=i+j+k+l;const n={Bank:i,Cash:j,Stocks:k,Businesses:l},o=Object.values(n).reduce((a,b)=>a+b,0);let p=0;const q=["#4299E1","#48BB78","#ECC94B","#F56565"];let r=0;for(const [s,t]of Object.entries(n)){if(t>0){const u=t/o*2*Math.PI;g.fillStyle=q[r++%q.length],g.beginPath(),g.moveTo(200,200),g.arc(200,200,120,p,p+u),g.closePath(),g.fill(),p+=u}}g.textAlign="left",g.font="16px Arial",g.fillStyle="#E2E8F0";let t=80;Object.entries(n).forEach(([a,b],c)=>{g.fillStyle=q[c%q.length],g.fillRect(380,t-10,20,10),g.fillStyle="#E2E8F0",g.fillText(`${a}: ${formatKMB(b)}`,410,t),t+=25}),g.font="bold 20px Arial",g.fillText("Net Worth",140,400),g.font="bold 30px Arial",g.fillStyle="#48BB78",g.fillText(formatKMB(m),120,440),g.font="bold 20px Arial",g.fillStyle="#E2E8F0",g.fillText("Credit Score",130,500),g.font="bold 30px Arial",g.fillStyle="#ECC94B",g.fillText(d.creditScore,155,540);const u=path.join(__dirname,"..","cache");await fs.ensureDir(u);const v=path.join(u,`report_${a}_${Date.now()}.png`),w=fs.createWriteStream(v);return f.createPNGStream().pipe(w),await new Promise(a=>w.on("finish",a)),fs.createReadStream(v)}
async function drawPhoneCanvas(state, userData, usersDataService, threadID) {
    const canvasWidth = 400; const canvasHeight = 850; const canvas = createCanvas(canvasWidth, canvasHeight); const ctx = canvas.getContext('2d');
    const wallpaperUrl = userData.wallpaperUrl || 'https://i.ibb.co/b58nZBh6/Picsart-25-06-10-21-34-55-158.jpg';
    try {
        const wallpaper = await loadImage(wallpaperUrl);
        ctx.drawImage(wallpaper, 0, 0, canvasWidth, canvasHeight);
    } catch (e) {
        const wallpaperGradient = ctx.createLinearGradient(0, 0, 0, canvasHeight); wallpaperGradient.addColorStop(0, '#2c3e50'); wallpaperGradient.addColorStop(1, '#3498db');
        ctx.fillStyle = wallpaperGradient; ctx.fillRect(0, 0, canvasWidth, canvasHeight);
    }
    ctx.fillStyle = 'rgba(0, 0, 0, 0.2)'; ctx.fillRect(0, 0, canvasWidth, canvasHeight);
    const timeZone = 'Asia/Dhaka'; const now = new Date(); const time = now.toLocaleTimeString('en-US', { timeZone, hour: '2-digit', minute: '2-digit', hour12: false });
    const date = now.toLocaleDateString('en-US', { timeZone, weekday: 'long', month: 'long', day: 'numeric' });
    ctx.fillStyle = '#FFFFFF'; ctx.font = `bold 18px ${FONT_FAMILY}`; ctx.textAlign = 'center'; ctx.shadowColor = 'rgba(0,0,0,0.7)'; ctx.shadowBlur = 4;
    ctx.fillText(`📶 🔋 ${time}`, canvasWidth / 2, 30); ctx.shadowBlur = 0;
    const appIcons = [
        { name: 'Anchestor', iconUrl: 'https://i.ibb.co/8nX3BDGv/Picsart-25-06-10-16-42-23-926.png' }, { name: 'Call', iconUrl: 'https://i.ibb.co/CsDtDKKb/Picsart-25-06-10-16-57-10-353.png' },
        { name: 'Messages', iconUrl: 'https://i.ibb.co/GfcB387Z/Picsart-25-06-10-17-02-02-228.png' }, { name: 'Maps', iconUrl: 'https://i.ibb.co/q3b1j21Q/Picsart-25-06-10-16-54-43-763.png' },
        { name: 'Calculator', iconUrl: 'https://i.ibb.co/7d8RkzC9/Picsart-25-06-10-16-46-07-667.png' }, { name: 'Calendar', iconUrl: 'https://i.ibb.co/qt2RKfV/Picsart-25-06-10-16-48-05-373.png' },
        { name: 'Gallery', iconUrl: 'https://i.ibb.co/CszzxvJH/Picsart-25-06-10-21-43-44-235.png' }, { name: 'Settings', iconUrl: 'https://i.ibb.co/Kx0kRXYk/Picsart-25-06-10-16-52-09-263.png' }
    ];
    const loadedIcons = await Promise.all(appIcons.map(app => app.iconUrl ? loadImage(app.iconUrl).catch(e => { console.log(`Failed to load icon: ${app.iconUrl}`); return null; }) : Promise.resolve(null)));
    const drawHeader = (title) => { ctx.fillStyle = 'rgba(0,0,0,0.4)'; ctx.fillRect(0, 0, canvasWidth, 60); ctx.fillStyle = '#FFFFFF'; ctx.font = `bold 22px ${FONT_FAMILY}`; ctx.textAlign = 'center'; ctx.fillText(title, canvasWidth / 2, 40); ctx.font = `bold 16px ${FONT_FAMILY}`; ctx.textAlign = 'left'; ctx.fillText('‹ Home', 20, 40); };
    if (state.screen === 'lockscreen') { ctx.font = `bold 52px ${FONT_FAMILY}`; ctx.fillText(time, canvasWidth / 2, canvasHeight / 2 - 40); ctx.font = `24px ${FONT_FAMILY}`; ctx.fillText(date, canvasWidth / 2, canvasHeight / 2 + 10); ctx.font = `bold 18px ${FONT_FAMILY}`; ctx.globalAlpha = 0.8; ctx.fillText('Reply anything to Unlock', canvasWidth / 2, canvasHeight - 80); ctx.globalAlpha = 1.0; } 
    else {
        if (state.screen === 'home') { let iconSize = 64; let padding = 28; let iconsPerRow = 4; let startX = (canvasWidth - (iconsPerRow * iconSize + (iconsPerRow - 1) * padding)) / 2; let startY = 80; appIcons.forEach((app, i) => { const row = Math.floor(i / iconsPerRow); const col = i % iconsPerRow; const x = startX + col * (iconSize + padding); const y = startY + row * (iconSize + padding + 30); if (loadedIcons[i]) { ctx.drawImage(loadedIcons[i], x, y, iconSize, iconSize); } else { ctx.font = `${iconSize}px Arial`; ctx.fillText(app.emoji, x + iconSize / 2, y + iconSize / 2); } ctx.font = `14px ${FONT_FAMILY}`; ctx.fillStyle = '#FFFFFF'; ctx.textAlign = 'center'; ctx.fillText(app.name, x + iconSize / 2, y + iconSize + 15); const unreadMessages = (userData.messages || []).filter(m => !m.read && m.senderId !== userData.userId).length; const missedCalls = (userData.callLog || []).filter(c => !c.read && c.type === 'missed').length; if (app.name === 'Messages' && unreadMessages > 0) { ctx.beginPath(); ctx.arc(x + iconSize, y, 12, 0, 2 * Math.PI); ctx.fillStyle = 'red'; ctx.fill(); ctx.fillStyle = 'white'; ctx.font = 'bold 14px Arial'; ctx.fillText(unreadMessages, x + iconSize, y); } if (app.name === 'Call' && missedCalls > 0) { ctx.beginPath(); ctx.arc(x + iconSize, y, 12, 0, 2 * Math.PI); ctx.fillStyle = 'red'; ctx.fill(); ctx.fillStyle = 'white'; ctx.font = 'bold 14px Arial'; ctx.fillText(missedCalls, x + iconSize, y); } }); }
        else if (state.screen === 'anchestor_app') { drawHeader("Anchestor Bank"); const userName = await usersDataService.getName(userData.userId) || "CARD HOLDER"; if (userData.card && userData.card.number) { ctx.fillStyle = '#4A5568'; fillRoundRect(ctx, 30, 80, canvasWidth - 60, 220, 20); const grad = ctx.createLinearGradient(0, 0, canvasWidth, 0); grad.addColorStop(0, '#7289DA'); grad.addColorStop(1, '#5B6EAE'); ctx.fillStyle = grad; fillRoundRect(ctx, 30, 80, canvasWidth - 60, 220, 20); ctx.font = 'bold 22px Arial'; ctx.fillStyle = '#FFFFFF'; ctx.textAlign = 'left'; ctx.fillText('Anchestor Debit', 50, 115); ctx.font = '24px "Courier New", monospace'; ctx.fillText(userData.card.number, 50, 170); ctx.font = '18px Arial'; ctx.fillText(userName.toUpperCase(), 50, 260); ctx.textAlign = 'right'; ctx.fillText('VALID', canvasWidth - 60, 260); } else { ctx.font = '18px Arial'; ctx.textAlign = 'center'; ctx.fillText('No card found.', canvasWidth / 2, 200); } ctx.textAlign = 'center'; ctx.font = 'bold 24px Arial'; ctx.fillStyle = '#FFFFFF'; ctx.fillText('Balance:', canvasWidth / 2, 360); ctx.font = 'bold 48px Arial'; ctx.fillStyle = '#48BB78'; ctx.fillText(formatKMB(userData.bank), canvasWidth / 2, 410); }
        else if (state.screen === 'calendar') { drawHeader("Calendar"); ctx.font = `bold 64px ${FONT_FAMILY}`; ctx.fillStyle = '#FFFFFF'; ctx.textAlign = 'center'; ctx.fillText(now.getDate(), canvasWidth / 2, 200); ctx.font = `32px ${FONT_FAMILY}`; ctx.fillText(now.toLocaleDateString('en-US', { timeZone, month: 'long', year: 'numeric' }), canvasWidth / 2, 260); ctx.font = `24px ${FONT_FAMILY}`; ctx.fillText(now.toLocaleDateString('en-US', { timeZone, weekday: 'long' }), canvasWidth / 2, 300); }
        else if (state.screen === 'maps') { drawHeader("Maps"); ctx.fillStyle = '#a2d2ff'; ctx.fillRect(20, 80, canvasWidth - 40, canvasHeight - 120); ctx.fillStyle = '#2a9d8f'; for(let i=0; i<5; i++) { fillRoundRect(ctx, 40 + Math.random()*280, 100 + Math.random()*600, 60, 40, 5); } ctx.fillStyle = '#e9c46a'; fillRoundRect(ctx, 100, 400, 200, 5, 2); fillRoundRect(ctx, 180, 200, 5, 250, 2); ctx.beginPath(); ctx.arc(180, 400, 10, 0, 2*Math.PI); ctx.fillStyle = 'red'; ctx.fill(); ctx.strokeStyle='white'; ctx.lineWidth=2; ctx.stroke(); }
        else if (state.screen === 'calculator') {
            drawHeader('Calculator'); const display = state.display || '0';
            ctx.fillStyle = '#111'; ctx.fillRect(20, 80, canvasWidth - 40, 120);
            ctx.fillStyle = '#fff'; ctx.textAlign = 'right'; ctx.font = 'bold 60px Arial';
            ctx.fillText(display.length > 9 ? parseFloat(display).toExponential(3) : display, canvasWidth - 40, 170);
            const buttons = [ ['C','(',')','/'], ['7','8','9','*'], ['4','5','6','-'], ['1','2','3','+'], ['0','.','='] ];
            const btnHeight = 100; const btnYStart = 220;
            buttons.forEach((row, r) => { row.forEach((label, c) => {
                const btnWidth = (canvasWidth-50)/row.length; const x = 25 + c * btnWidth; const y = btnYStart + r * btnHeight;
                ctx.fillStyle = isNaN(parseInt(label)) && label !== '.' ? '#f09a36' : '#333';
                if(label === '=') fillRoundRect(ctx, x, y, btnWidth*2 - 5, btnHeight-20, 10);
                else fillRoundRect(ctx, x, y, btnWidth-5, btnHeight-20, 10);
                ctx.fillStyle = '#fff'; ctx.textAlign = 'center'; ctx.font = 'bold 32px Arial';
                if(label === '=') ctx.fillText(label, x + (btnWidth*2-5)/2, y + (btnHeight-20)/2);
                else ctx.fillText(label, x + (btnWidth-5)/2, y + (btnHeight-20)/2);
            });});
        }
        else if (state.screen === 'messages_list' || state.screen === 'call_log' || state.screen === 'settings' || state.screen === 'gallery_home') {
             drawHeader(state.screen === 'messages_list' ? 'Messages' : state.screen === 'call_log' ? 'Call Log' : state.screen === 'settings' ? 'Settings' : 'Gallery');
             let yPos = 80;
             if (state.screen === 'messages_list') {
                const messageThreads = {}; (userData.messages || []).forEach(msg => { const otherPartyId = msg.senderId === userData.userId ? msg.recipientId : msg.senderId; if (!messageThreads[otherPartyId]) messageThreads[otherPartyId] = { messages: [], unread: false, name: '' }; messageThreads[otherPartyId].messages.push(msg); if (!msg.read && msg.senderId !== userData.userId) messageThreads[otherPartyId].unread = true; });
                let index = 1; for (const [userId, thread] of Object.entries(messageThreads)) { const lastMessage = thread.messages[thread.messages.length - 1]; const name = await usersDataService.getName(userId) || `User ${userId}`; thread.name = name; ctx.fillStyle = thread.unread ? '#3a3a3a' : '#222'; fillRoundRect(ctx, 20, yPos, canvasWidth - 40, 60, 10); ctx.fillStyle = '#FFFFFF'; ctx.font = 'bold 16px Arial'; ctx.textAlign = 'left'; ctx.fillText(`${index}. ${name}`, 35, yPos + 20); ctx.font = '14px Arial'; ctx.fillStyle = '#AAAAAA'; wrapText(ctx, (lastMessage.senderId === userData.userId ? "You: " : "") + lastMessage.content, 35, yPos + 40, canvasWidth - 80, 18); if (thread.unread) { ctx.beginPath(); ctx.arc(canvasWidth - 35, yPos + 30, 8, 0, 2 * Math.PI); ctx.fillStyle = '#7289DA'; ctx.fill(); } yPos += 75; index++; }
            } else if (state.screen === 'call_log') {
                const callLog = (userData.callLog || []).slice(-10).reverse(); if (callLog.length === 0) { ctx.textAlign='center'; ctx.fillStyle='#ccc'; ctx.font='18px Arial'; ctx.fillText("No recent calls.", canvasWidth/2, 200); } for(const call of callLog) { const name = call.type === 'missed' ? call.from : call.to; const color = call.type === 'missed' ? '#F04747' : '#43B581'; ctx.fillStyle = color; ctx.font = 'bold 20px Arial'; ctx.textAlign='left'; ctx.fillText(call.type === 'missed' ? '↓' : '↑', 30, yPos+25); ctx.fillStyle = '#FFF'; ctx.fillText(name, 60, yPos+25); ctx.font='14px Arial'; ctx.fillStyle='#aaa'; ctx.textAlign='right'; ctx.fillText(new Date(call.date).toLocaleTimeString(), canvasWidth-30, yPos+25); yPos += 40; }
            } else if (state.screen === 'settings') {
                 const settingsOptions = ["1. About Phone", "2. Network Information", "3. Change Wallpaper"];
                 ctx.fillStyle = '#FFF'; ctx.font = '18px Arial'; ctx.textAlign = 'left'; settingsOptions.forEach((opt, i) => { ctx.fillText(opt, 40, 120 + i * 40); });
            } else if (state.screen === 'gallery_home') {
                 ctx.textAlign = 'center'; ctx.font = '24px Arial'; ctx.fillStyle = '#FFFFFF';
                 ctx.fillText("1. View Gallery", canvasWidth / 2, 150);
                 ctx.fillText("2. Save Image", canvasWidth / 2, 200);
            }
        }
    }
    const tempImageDir = path.join(__dirname, "..", "cache"); await fs.ensureDir(tempImageDir); const tempImagePath = path.join(tempImageDir, `phone_${userData.userId}_${Date.now()}.png`);
    const out = fs.createWriteStream(tempImagePath); canvas.createPNGStream().pipe(out);
    await new Promise((resolve) => out.on('finish', resolve));
    return fs.createReadStream(tempImagePath);
}

// --- Main Module ---
module.exports = {
    config: { name: "bank", aliases: ["ab", "anchestor"], version: "5.0", author: "Mahi--", role: 0, countDown: 3, shortDescription: { en: "The complete Anchestor Bank financial system." }, longDescription: { en: "The ultimate banking experience with a huge array of financial tools and games." }, category: "economy" },
    onReply: async function ({ event, api, message, Reply, usersData }) {
        const { author, type } = Reply; if (event.senderID !== author) return;
        const handler = { 'ai_talk': this.handleAiTalkReply, 'atm_flow': this.handleAtmReply, 'card_creation': this.handleCardCreationReply, 'pin_change': this.handlePinChangeReply, 'phone_flow': this.handlePhoneReply }[type];
        if (handler) await handler.call(this, { event, api, message, Reply, usersData });
    },
    handleCardCreationReply: async function ({ event, message, Reply }) { const pin = event.body.trim(); if (!/^\d{4}$/.test(pin)) { message.reply("Invalid format. Please reply with exactly 4 numbers for your PIN.", (err, info) => { if(err) return; global.GoatBot.onReply.set(info.messageID, Reply); }); return; } const db = await getDb(); const userBankInfo = await getUserBankData(event.senderID, db); const cardNumber = '4269 ' + Array.from({ length: 3 }, () => Math.floor(1000 + Math.random() * 9000)).join(' '); userBankInfo.card = { number: cardNumber, pin: pin }; await updateUserBankData(event.senderID, userBankInfo, db); const p = global.utils.getPrefix(event.threadID) || "."; message.reply(`✅ Your Anchestor Bank debit card is active!\n\n💳 Card Number: ${cardNumber}\n🔒 PIN: ••••\n\nYou can now use the ATM with: ${p}bank atm`); },
    handleAtmReply: async function ({ event, message, Reply, usersData }) {
        const db = await getDb(); let userBankInfo = await getUserBankData(event.senderID, db); let userCash = await usersData.get(event.senderID, "money") || 0; const userName = await usersData.getName(event.senderID); const userInput = event.body.trim(); let { state } = Reply;
        const footerMainMenu = "Reply with a number (1-6) to select an option, or 'exit'.";
        const sendReply = (msg, screen, data, nextStep, footer) => { drawModernAtmCanvas({ screen, footerMessage: footer }, { userName, ...data }).then(attachment => { state.step = nextStep; message.reply({ body: msg, attachment }, (err, info) => { fs.unlink(attachment.path, () => {}); if (err) return; if (nextStep) global.GoatBot.onReply.set(info.messageID, { commandName: this.config.name, author: event.senderID, type: 'atm_flow', state }); }); }); };
        if (userInput.toLowerCase() === 'exit') return message.reply("Session terminated. Thank you for using Anchestor Bank.");
        if (state.step === 'awaiting_pin') { if (userInput !== userBankInfo.card.pin) return message.reply("❌ Incorrect PIN. Session terminated for security."); sendReply(`PIN Accepted.`, 'main_menu', {}, 'main_menu', footerMainMenu); return; }
        if (state.step === 'main_menu') {
            const choice = parseInt(userInput, 10);
            switch (choice) {
                case 1: sendReply("Your account balance is shown on screen.", 'balance', { balance: formatKMB(userBankInfo.bank) }, 'main_menu', footerMainMenu); break;
                case 2: sendReply("Enter amount to withdraw:", 'prompt', { message: "How much would you like to withdraw?" }, 'awaiting_withdraw_amount', "Reply with the amount or 'exit'."); break;
                case 3: const fastCashAmount = 500; if (userBankInfo.bank < fastCashAmount) return sendReply(`Transaction Failed.`, 'receipt', { isError: true, title: "Insufficient Funds", message: `You need ${formatKMB(fastCashAmount)}.` }, 'main_menu', footerMainMenu); userBankInfo.bank -= fastCashAmount; await usersData.set(event.senderID, { money: userCash + fastCashAmount }); await updateUserBankData(event.senderID, userBankInfo, db); await addTransaction(event.senderID, "Withdraw", `Fast Cash via ATM`, -fastCashAmount, db); sendReply(`Successfully withdrew ${formatKMB(fastCashAmount)}.`, 'receipt', { isError: false, title: "Transaction Successful", message: `Withdrew: ${formatKMB(fastCashAmount)}\nNew Balance: ${formatKMB(userBankInfo.bank)}` }, 'main_menu', footerMainMenu); break;
                case 4: sendReply("Enter amount of cash to deposit:", 'prompt', { message: "How much cash are you depositing?" }, 'awaiting_deposit_amount', "Reply with the amount or 'exit'."); break;
                case 5: sendReply("Reply with the @mention of the user and the amount, separated by a space.", 'prompt', { message: `To whom and how much?\n\nExample:\n@John Doe 5000` }, 'awaiting_transfer_details', "Reply with @mention and amount, or 'exit'."); break;
                case 6: const hist = userBankInfo.transactionHistory; if (hist.length === 0) return sendReply("No recent transactions found.", 'receipt', { isError: true, title: "Statement", message: "Your transaction history is empty." }, 'main_menu', footerMainMenu); const statement = "Your Last 5 Transactions:\n\n" + hist.slice(-5).reverse().map(t => `[${new Date(t.date).toLocaleDateString()}] ${t.description}: ${formatKMB(t.amount)}`).join('\n'); sendReply("Your mini statement is displayed.", 'receipt', { isError: false, title: "Mini Statement", message: statement }, 'main_menu', footerMainMenu); break;
                default: sendReply("Invalid selection.", 'main_menu', {}, 'main_menu', footerMainMenu);
            } return;
        }
        const handleTransaction = async (type, input) => { const amount = parseFloat(input); if (isNaN(amount) || amount <= 0) return sendReply("Invalid amount.", 'receipt', { isError: true, title: "Transaction Failed", message: "Amount must be a positive number." }, 'main_menu', footerMainMenu); if (type === 'withdraw' && userBankInfo.bank < amount) return sendReply("Insufficient funds.", 'receipt', { isError: true, title: "Transaction Failed", message: `Your balance is only ${formatKMB(userBankInfo.bank)}.` }, 'main_menu', footerMainMenu); if (type === 'deposit' && userCash < amount) return sendReply("Insufficient cash.", 'receipt', { isError: true, title: "Transaction Failed", message: `You only have ${formatKMB(userCash)}.` }, 'main_menu', footerMainMenu); if (type === 'withdraw') { userBankInfo.bank -= amount; await usersData.set(event.senderID, { money: userCash + amount }); await updateUserBankData(event.senderID, userBankInfo, db); await addTransaction(event.senderID, "Withdraw", `Withdrew ${formatKMB(amount)} via ATM`, -amount, db); sendReply("Please take your cash.", 'receipt', { isError: false, title: "Withdrawal Successful", message: `Withdrew: ${formatKMB(amount)}\nNew Balance: ${formatKMB(userBankInfo.bank)}` }, 'main_menu', footerMainMenu); } else if (type === 'deposit') { userBankInfo.bank += amount; await usersData.set(event.senderID, { money: userCash - amount }); await updateUserBankData(event.senderID, userBankInfo, db); await addTransaction(event.senderID, "Deposit", `Deposited ${formatKMB(amount)} via ATM`, amount, db); sendReply("Deposit successful.", 'receipt', { isError: false, title: "Deposit Successful", message: `Deposited: ${formatKMB(amount)}\nNew Balance: ${formatKMB(userBankInfo.bank)}` }, 'main_menu', footerMainMenu); } };
        if (state.step === 'awaiting_withdraw_amount') await handleTransaction('withdraw', userInput); if (state.step === 'awaiting_deposit_amount') await handleTransaction('deposit', userInput);
    },
    handleAiTalkReply: async function ({ event, message, Reply }) { try { const stockDataString = "Current Market Data: " + Object.entries(stockMarket).map(([symbol, data]) => `${symbol}: ${formatKMB(data.price)}`).join(', '); const updatedConversationPrompt = `${AI_MANAGER_PROMPT}\n\n${stockDataString}\n\n---\n\n${Reply.conversation}\nUser: ${event.body}\nManager:`; const response = await axios.get(`http://193.149.164.141:8610/api/gemini?text=${encodeURIComponent(updatedConversationPrompt)}`); const aiResponse = response.data.response || "I am unable to process your request at this moment."; const newConversationState = `${Reply.conversation}\nUser: ${event.body}\nManager: ${aiResponse}`; message.reply(aiResponse, (err, info) => { if (err) return; global.GoatBot.onReply.set(info.messageID, { commandName: this.config.name, author: event.senderID, type: 'ai_talk', conversation: newConversationState }); }); } catch (error) { message.reply("My apologies, the AI service is currently unavailable."); } },
    handlePinChangeReply: async function({ event, message, Reply }) { const db = await getDb(); const userBankInfo = await getUserBankData(event.senderID, db); const userInput = event.body.trim(); let { state } = Reply; const sendPinReply = (msg, nextStep) => { state.step = nextStep; message.reply(msg, (err, info) => { if (err) return; if (nextStep) global.GoatBot.onReply.set(info.messageID, { commandName: this.config.name, author: event.senderID, type: 'pin_change', state }); }); }; if (state.step === 'awaiting_old_pin') { if (userInput !== userBankInfo.card.pin) return message.reply("❌ Incorrect old PIN. Process terminated."); sendPinReply("Old PIN verified. Please enter your new 4-digit PIN.", 'awaiting_new_pin'); } else if (state.step === 'awaiting_new_pin') { if (!/^\d{4}$/.test(userInput)) return sendPinReply("Invalid format. Your new PIN must be 4 digits. Please try again.", 'awaiting_new_pin'); state.newPin = userInput; sendPinReply("Please re-enter your new PIN to confirm.", 'awaiting_pin_confirmation'); } else if (state.step === 'awaiting_pin_confirmation') { if (userInput !== state.newPin) return message.reply("❌ PINs do not match. Process terminated."); userBankInfo.card.pin = state.newPin; await updateUserBankData(event.senderID, userBankInfo, db); message.reply("✅ Your PIN has been successfully changed."); } },
    handlePhoneReply: async function({ event, message, Reply, usersData, api }) {
        const db = await getDb(); let userBankInfo = await getUserBankData(event.senderID, db); const userInput = event.body.trim(); let { state } = Reply;
        const renderPhone = async (newState, promptText) => {
            const attachment = await drawPhoneCanvas(newState, userBankInfo, usersData, event.threadID);
            const defaultPrompt = "Reply with 'home' to return, or 'exit'.";
            message.reply({ body: promptText || defaultPrompt, attachment }, (err, info) => { fs.unlink(attachment.path, ()=>{}); if (err) return; newState.step = newState.screen; global.GoatBot.onReply.set(info.messageID, { commandName: this.config.name, author: event.senderID, type: 'phone_flow', state: newState }); });
        };
        if (userInput.toLowerCase() === 'exit') return message.reply("Phone closed.");
        if (userInput.toLowerCase() === 'home') return await renderPhone({ screen: 'home' }, "📱 Home Screen\nReply with a number (1-8) to open an app.");
        if (state.step === 'lockscreen') return await renderPhone({ screen: 'home' }, "📱 Home Screen\nReply with a number (1-8) to open an app.");
        if (state.step === 'home') {
            const choice = parseInt(userInput); if (isNaN(choice) || choice < 1 || choice > 8) return;
            const appMap = ['messages_list', 'call_log', 'anchestor_app', 'maps', 'calculator', 'calendar', 'gallery_home', 'settings'];
            const selectedScreen = appMap[choice - 1];
            if (selectedScreen === 'stocks') { const stockAttachment = await drawStockMarketCanvas(1); return message.reply({body: "Opening Stocks App...", attachment: stockAttachment}, () => fs.unlink(stockAttachment.path, ()=>{})) }
            let prompt = "Reply 'home' to exit app.";
            if(selectedScreen === 'calculator') prompt = "Calculator. Reply with an equation (e.g. 5*8), 'C' to clear, or 'home'.";
            if(selectedScreen === 'settings') prompt = "Settings. Reply with a number (1-3), or 'home'.";
            return await renderPhone({ screen: selectedScreen, display: '0' }, prompt);
        }
        if (state.step === 'calculator') {
            if (userInput.toLowerCase() === 'c') return await renderPhone({ screen: 'calculator', display: '0' }, "Calculator cleared. Enter a new equation.");
            try { const result = safeEval(userInput); return await renderPhone({ screen: 'calculator', display: String(result) }); } 
            catch (e) { return await renderPhone({ screen: 'calculator', display: 'Error' }); }
        }
        if (state.step === 'settings') {
            const choice = parseInt(userInput);
            if(choice === 3) {
                return await renderPhone({ screen: 'change_wallpaper'}, "Please reply with an image attachment to set as your new wallpaper.");
            }
        }
        if (state.step === 'change_wallpaper') {
            if (event.attachments.length > 0 && event.attachments[0].type === 'photo') {
                userBankInfo.wallpaperUrl = event.attachments[0].url;
                await updateUserBankData(event.senderID, userBankInfo, db);
                return message.reply("✅ Wallpaper successfully changed!");
            } else { return message.reply("That is not a valid image. Please reply with a photo."); }
        }
    },
    
    onStart: async function ({ args, message, event, api, usersData }) {
        const p = global.utils.getPrefix(event.threadID) || "."; const senderID = String(event.senderID);
        const db = await getDb(); let userBankInfo = await getUserBankData(senderID, db); let userCash = await usersData.get(senderID, "money") || 0;
        const command = args[0]?.toLowerCase();
        const mainGuide = toBoldUnicode("🏦 Anchestor Bank Main Menu 🏦\n\n") + `Use '${p}bank help <category>' for more info.\n` + `Example: ${p}bank help account\n\n` + "𝗖𝗔𝗧𝗘𝗚𝗢𝗥𝗜𝗘𝗦:\n" + "» account\n" + "» atm\n" + "» assets\n" + "» market\n" + "» tools\n" + "» ai\n" + "» phone";
        if (userBankInfo.loan.amount > 0 && userBankInfo.loan.dueDate && new Date() > new Date(userBankInfo.loan.dueDate)) { const now = new Date(); const twoHours = 2 * 60 * 60 * 1000; if (!userBankInfo.lastLoanWarning || (now - new Date(userBankInfo.lastLoanWarning) > twoHours)) { message.reply(`🚨 Loan Payment Overdue!\nYour loan of ${formatKMB(userBankInfo.loan.amount)} is past its due date. Late payments may negatively affect your credit score. Use '${p}bank payloan' to make a payment.`); userBankInfo.lastLoanWarning = now; await updateUserBankData(senderID, userBankInfo, db); } }
        if (!command || command === 'help' || command === 'guide') {
            const helpCategory = args[1]?.toLowerCase();
            const categories = { 'account': "👤 𝗔𝗖𝗖𝗢𝗨𝗡𝗧 & 𝗗𝗔𝗜𝗟𝗬\n`" + `${p}bank daily`+ "` - Claim daily reward\n`" + `${p}bank balance` + "` [@mention] - Check balance\n`" + `${p}bank report` + "` - View a financial report canvas\n`" + `${p}bank tier` + "` - Check your financial tier & perks\n`" + `${p}bank credit_score` + "` - Check your credit score", 'atm': "💳 𝗖𝗔𝗥𝗗 & 𝗔𝗧𝗠\n`" + `${p}bank create_card` + "` - Create your bank card\n`" + `${p}bank card` + "` - View your debit card\n`" + `${p}bank atm` + "` - Access the interactive ATM\n`" + `${p}bank change_pin` + "` - Change your card's PIN\n`" + `${p}bank reset_pin` + "` - Start the PIN reset process", 'assets': "🏘️ 𝗔𝗦𝗦𝗘𝗧 𝗠𝗔𝗡𝗔𝗚𝗘𝗠𝗘𝗡𝗧\n`" + `${p}bank property` + "` list/buy/sell/portfolio\n`" + `${p}bank business` + "` list/buy/portfolio/collect\n`" + `${p}bank insurance` + "` list/buy/status\n`"+ `${p}bank collectrent` + "` - Collect property rent", 'market': "💹 𝗠𝗔𝗥𝗞𝗘𝗧 & 𝗧𝗥𝗔𝗗𝗜𝗡𝗚\n`" + `${p}bank stock` + "` market/price/buy/sell/portfolio/chart\n`" + `${p}bank invest` + "` list/buy/claim/sell/portfolio\n`"+ `${p}bank market` + "` list/sell/buy - Player-to-player property market\n`" + `${p}bank ipo` + "` status/buy - Participate in IPOs", 'tools': "🛠️ 𝗙𝗜𝗡𝗔𝗡𝗖𝗜𝗔𝗟 𝗧𝗢𝗢𝗟𝗦\n`" + `${p}bank deposit` + "` <amount>\n`" + `${p}bank withdraw` + "` <amount> <pin>\n`"+ `${p}bank transfer` + "` <@mention> <amount> <pin>\n`" + `${p}bank loan` + "` <amount>\n`" + `${p}bank payloan` + "` <amount> <pin>\n`" + `${p}bank cheque` + "` write/cash/list", 'ai': "🤖 𝗔𝗜 & 𝗘𝗩𝗘𝗡𝗧𝗦\n" + `  ${p}bank talk <message> - Chat with the AI Manager\n` + `  ${p}bank suggest - Get AI stock suggestions\n` + `  ${p}bank news - Get AI market news\n` + `  ${p}bank event_status - Check for active market events`, 'phone': "📱 𝗣𝗛𝗢𝗡𝗘 𝗦𝗘𝗥𝗩𝗜𝗖𝗘𝗦\n" + `  ${p}bank phone - Open your phone interface\n` + `  ${p}bank message <@mention/ID> <message> - Send a message\n`+ `  ${p}bank call <ID> - Make a call` };
            if (helpCategory && categories[helpCategory]) return message.reply(toBoldUnicode(categories[helpCategory]));
            return message.reply(mainGuide);
        }
        
        const commandString = args.join(" ").toLowerCase();
        let pinSensitiveCommands = ["withdraw", "transfer", "payloan", "cheque write", "invest buy", "invest sell", "stock sell", "property sell", "market sell", "business buy"];
        let isSensitive = pinSensitiveCommands.some(cmd => commandString.startsWith(cmd));
        if (isSensitive && userBankInfo.card && userBankInfo.card.pin) { const providedPin = args[args.length - 1]; if (!/^\d{4}$/.test(providedPin) || providedPin !== userBankInfo.card.pin) { return message.reply(toBoldUnicode(`🔒 This action requires your 4-digit PIN. Please append it to the command.`)); } args.pop(); }

        switch (command) {
            case "create_card": { if (userBankInfo.card && userBankInfo.card.number) return message.reply(`You already have an Anchestor Bank card.`); message.reply("Please reply with a 4-digit PIN for your new ATM card.", (err, info) => { if (err) return; global.GoatBot.onReply.set(info.messageID, { commandName: this.config.name, author: event.senderID, type: 'card_creation' }); }); return; }
            case "atm": { if (!userBankInfo.card || !userBankInfo.card.pin) return message.reply(`You need an Anchestor Bank card. Create one with: ${p}bank create_card`); message.reply("Welcome to the Anchestor Bank ATM. Please reply with your 4-digit PIN.", (err, info) => { if (err) return; global.GoatBot.onReply.set(info.messageID, { commandName: this.config.name, author: event.senderID, type: 'atm_flow', state: { step: 'awaiting_pin' } }); }); return; }
            case "card": { if (!userBankInfo.card || !userBankInfo.card.number) return message.reply(`You don't have a card yet. Create one with: ${p}bank create_card`); const attachment = await drawPhoneCanvas({ screen: 'anchestor_app' }, userBankInfo, usersData, event.threadID); return message.reply({body: "💳 Here is your Anchestor Bank Debit Card.", attachment}, ()=>fs.unlink(attachment.path, ()=>{})); }
            case "phone": { const attachment = await drawPhoneCanvas({ screen: 'lockscreen' }, userBankInfo, usersData, event.threadID); message.reply({body: "📱 Phone locked. Reply to unlock.", attachment}, (err, info) => { fs.unlink(attachment.path, ()=>{}); if(err) return; global.GoatBot.onReply.set(info.messageID, { commandName: this.config.name, author: event.senderID, type: 'phone_flow', state: { step: 'lockscreen' } }); }); return; }
            case "message": { let recipientId = Object.keys(event.mentions)[0] || args[1]; if (!recipientId) return message.reply(`Please specify who to message.`); const msgContent = args.slice(2).join(" "); if (!msgContent) return message.reply("You cannot send an empty message."); try { const recipientData = await getUserBankData(recipientId, db); recipientData.messages.push({ senderId: senderID, content: msgContent, date: new Date(), read: false }); await updateUserBankData(recipientId, recipientData, db); const senderName = await usersData.getName(senderID); await api.sendMessage(`🔔 You have a new message from ${senderName}! Check with '${p}bank phone'.`, recipientId); return message.reply("Message sent!"); } catch (e) { const allUsers = await usersData.getAll(); const targetUser = allUsers.find(u => u.userID === recipientId); if (targetUser) { api.sendMessage(`A user (${await usersData.getName(senderID)}) is trying to reach you. Please use '${p}bank create_card' to set up your Anchestor Bank account and phone to receive messages.`, event.threadID, (err, info) => {}, recipientId); return message.reply("That user does not have an Anchestor Bank account. A notification has been sent to them."); } else { return message.reply("Could not find that user."); } } }
            case "call": { let recipientId = Object.keys(event.mentions)[0] || args[1]; if (!recipientId) return message.reply(`Please specify who to call.`); try { const recipientData = await getUserBankData(recipientId, db); const senderName = await usersData.getName(senderID); recipientData.callLog.push({ type: 'missed', from: senderName, fromId: senderID, date: new Date(), read: false }); userBankInfo.callLog.push({ type: 'outgoing', to: await usersData.getName(recipientId), toId: recipientId, date: new Date() }); await updateUserBankData(senderID, userBankInfo, db); await updateUserBankData(recipientId, recipientData, db); await api.sendMessage(`📞 You have a missed call from ${senderName}! Check with '${p}bank phone'.`, recipientId); return message.reply(`Calling ${await usersData.getName(recipientId)}... They did not answer.`); } catch(e) { const allUsers = await usersData.getAll(); const targetUser = allUsers.find(u => u.userID === recipientId); if (targetUser) { api.sendMessage(`A user (${await usersData.getName(senderID)}) is trying to call you. Please use '${p}bank create_card' to set up your Anchestor Bank account and phone to receive calls.`, event.threadID, (err, info) => {}, recipientId); return message.reply("That user does not have an Anchestor Bank account. A notification has been sent to them."); } else { return message.reply("Could not find that user."); } } }
            case "news": { try { const prompt = AI_MANAGER_PROMPT + "\nGenerate 3 fictional, brief market news headlines for the Anchestor Bank simulation."; const res = await axios.get(GEMINI_API_URL + encodeURIComponent(prompt)); return message.reply(`🗞️ ${toBoldUnicode("Anchestor Bank Market News")}\n\n` + res.data.response); } catch (e) { return message.reply("The news wire service is currently unavailable."); } }
            case "suggest": { try { const prompt = AI_MANAGER_PROMPT + `\nBased on our internal Anchestor Bank market data, suggest two fictional stock options for a client's portfolio. Provide a very brief, fictional reason for each.`; const res = await axios.get(GEMINI_API_URL + encodeURIComponent(prompt)); return message.reply(`💡 ${toBoldUnicode("AI Stock Suggestions")}\n\n` + res.data.response); } catch (e) { return message.reply("The AI analysis service is currently unavailable."); } }
            case "talk": { const userMessage = args.slice(1).join(" "); if (!userMessage) return message.reply(`Please provide a message to the AI Manager.\nExample: ${p}bank talk Tell me about my account.`); try { const stockDataString = "Current Market Data: " + Object.entries(stockMarket).map(([symbol, data]) => `${symbol}: ${formatKMB(data.price)}`).join(', '); const initialPrompt = `${AI_MANAGER_PROMPT}\n\n${stockDataString}\n\n---\n\nConversation Start:\n\nUser: ${userMessage}\nManager:`; const response = await axios.get(`http://193.149.164.141:8610/api/gemini?text=${encodeURIComponent(initialPrompt)}`); const aiResponse = response.data.response || "I am unable to respond at the moment."; const conversationState = `User: ${userMessage}\nManager: ${aiResponse}`; return message.reply(aiResponse, (err, info) => { if (err) return; global.GoatBot.onReply.set(info.messageID, { commandName: this.config.name, author: event.senderID, type: 'ai_talk', conversation: conversationState }); }); } catch (error) { return message.reply("The AI Manager service is currently unavailable."); } }
            case "balance": { let targetId = senderID; if (Object.keys(event.mentions).length > 0) targetId = Object.keys(event.mentions)[0]; else if (event.type === "message_reply") targetId = event.messageReply.senderID; const targetBankData = await getUserBankData(targetId, db); const targetCash = await usersData.get(targetId, "money") || 0; const targetName = await usersData.getName(targetId); const balanceTitle = targetId === senderID ? "Your Financial Overview" : `${targetName}'s Financial Overview`; return message.reply(toBoldUnicode(`📊 ${balanceTitle} 📊\n\n💵 Cash: ${formatKMB(targetCash)}\n🏦 Bank: ${formatKMB(targetBankData.bank)}`)); }
            case "deposit": { const amount = parseFloat(args[1]); if (isNaN(amount) || amount <= 0) return message.reply(`Invalid amount.`); if (amount > userCash) return message.reply(`Insufficient cash.`); userCash -= amount; userBankInfo.bank += amount; userBankInfo.report.earned += amount; await usersData.set(senderID, { money: userCash }); await updateUserBankData(senderID, userBankInfo, db); await logAudit(db, "DEPOSIT", event, { amount }); return message.reply(`✅ Deposited ${formatKMB(amount)}.`); }
            case "withdraw": { const amount = parseFloat(args[1]); if (isNaN(amount) || amount <= 0) return message.reply(`Invalid amount.`); if (amount > userBankInfo.bank) return message.reply(`Insufficient bank funds.`); userBankInfo.bank -= amount; userCash += amount; userBankInfo.report.spent += amount; await usersData.set(senderID, { money: userCash }); await updateUserBankData(senderID, userBankInfo, db); await logAudit(db, "WITHDRAW", event, { amount }); return message.reply(`✅ Withdrew ${formatKMB(amount)}.`); }
            case "transfer": { let recipientId = Object.keys(event.mentions)[0] || args[1]; const transferAmount = parseFloat(args[2]); if (!recipientId || isNaN(transferAmount) || transferAmount <= 0) return message.reply(`Invalid format.`); if (String(recipientId) === senderID) return message.reply("Cannot transfer to yourself."); if (transferAmount > userBankInfo.bank) return message.reply(`Insufficient bank balance.`); let recipientBankData = await getUserBankData(String(recipientId), db); userBankInfo.bank -= transferAmount; userBankInfo.report.spent += transferAmount; recipientBankData.bank += transferAmount; recipientBankData.report.earned += transferAmount; await updateUserBankData(senderID, userBankInfo, db); await updateUserBankData(String(recipientId), recipientBankData, db); const recipientName = await usersData.getName(String(recipientId)) || `User ${recipientId}`; await logAudit(db, "TRANSFER", event, { to: String(recipientId), amount: transferAmount }); return message.reply(`✅ Transferred ${formatKMB(transferAmount)} to ${recipientName}.`); }
            case "loan": { const loanAmount = parseFloat(args[1]); if (isNaN(loanAmount) || loanAmount <= 0) return message.reply(`Invalid amount.`); if (userBankInfo.loan.amount > 0) return message.reply(`You already have an outstanding loan.`); const creditScore = await calculateCreditScore(userBankInfo, userCash); const maxLoan = Math.floor(((userBankInfo.bank + userCash) * 0.25) + (creditScore * 100)); if (loanAmount > maxLoan) return message.reply(`Your maximum loan is ${formatKMB(maxLoan)}.`); userBankInfo.loan.amount = loanAmount; userBankInfo.loan.dueDate = new Date(Date.now() + 14 * 86400000); userBankInfo.bank += loanAmount; userBankInfo.report.earned += loanAmount; await updateUserBankData(senderID, userBankInfo, db); await logAudit(db, "LOAN_TAKE", event, {amount: loanAmount}); return message.reply(`Loan approved! ${formatKMB(loanAmount)} has been credited. Due in 14 days.`); }
            case "payloan": { const paymentAmount = parseFloat(args[1]); if (isNaN(paymentAmount) || paymentAmount <= 0) return message.reply(`Invalid amount.`); if (userBankInfo.loan.amount <= 0) return message.reply("You have no outstanding loan."); if (paymentAmount > userCash) return message.reply(`Insufficient cash.`); const paidAmount = Math.min(paymentAmount, userBankInfo.loan.amount); await usersData.set(senderID, { money: userCash - paidAmount }); userBankInfo.loan.amount -= paidAmount; userBankInfo.report.spent += paidAmount; if (userBankInfo.loan.amount <= 0) { userBankInfo.loan.history.repaid = (userBankInfo.loan.history.repaid || 0) + 1; userBankInfo.loan.amount = 0; userBankInfo.loan.dueDate = null; } await updateUserBankData(senderID, userBankInfo, db); await logAudit(db, "LOAN_PAY", event, {amount: paidAmount}); if (userBankInfo.loan.amount <= 0) return message.reply("Congratulations! You have fully paid off your loan. This will improve your credit score."); return message.reply(`You paid ${formatKMB(paidAmount)}. Remaining loan: ${formatKMB(userBankInfo.loan.amount)}.`); }
            case "business": { const subCmd = args[1]?.toLowerCase(); if (!subCmd) return message.reply(`Please specify a business action.\nExample: ${p}bank business list`); if (subCmd === 'list') { let listMsg = toBoldUnicode("🏢 Businesses For Sale 🏢\n\n"); availableBusinesses.forEach(b => listMsg += `${toBoldUnicode(b.id)}: ${b.name}\nCost: ${formatKMB(b.cost)}\nIncome: ~${formatKMB(b.baseIncome)}/hr\n---\n`); return message.reply(listMsg + `Use ${p}bank business buy <ID>`); } if (subCmd === 'buy') { const businessId = args[2]?.toUpperCase(); const businessToBuy = availableBusinesses.find(b => b.id === businessId); if (!businessToBuy) return message.reply(`Invalid business ID.`); if (userBankInfo.businesses.some(b => b.businessId === businessId)) return message.reply("You already own this type of business."); if (businessToBuy.cost > userCash) return message.reply(`Insufficient cash. You need ${formatKMB(businessToBuy.cost)}.`); await usersData.set(senderID, { money: userCash - businessToBuy.cost }); userBankInfo.businesses.push({ businessId: businessToBuy.id, lastCollected: new Date() }); await updateUserBankData(senderID, userBankInfo, db); await logAudit(db, "BUSINESS_BUY", event, {business: businessId, cost: businessToBuy.cost}); return message.reply(`Congratulations! You are now the owner of ${businessToBuy.name}.`); } if (subCmd === 'portfolio') { if (userBankInfo.businesses.length === 0) return message.reply("You do not own any businesses."); let portMsg = toBoldUnicode("📈 Your Business Portfolio 📈\n\n"); userBankInfo.businesses.forEach(owned => { const details = availableBusinesses.find(b => b.id === owned.businessId); portMsg += `${toBoldUnicode(details.name)}\nIncome: ~${formatKMB(details.baseIncome)}/hr\n---\n`; }); return message.reply(portMsg + `Use ${p}bank business collect to get your profits.`); } if (subCmd === 'collect') { if (userBankInfo.businesses.length === 0) return message.reply("You do not own any businesses to collect profits from."); let totalProfit = 0; const now = new Date(); userBankInfo.businesses.forEach(owned => { const details = availableBusinesses.find(b => b.id === owned.businessId); const hoursSinceCollected = (now - new Date(owned.lastCollected)) / 36e5; const profit = Math.floor(hoursSinceCollected * details.baseIncome); totalProfit += profit; owned.lastCollected = now; }); if (totalProfit <= 0) return message.reply("It's too soon to collect profits. Wait a while longer."); userBankInfo.bank += totalProfit; userBankInfo.report.earned += totalProfit; userBankInfo.report.rent += totalProfit; await updateUserBankData(senderID, userBankInfo, db); await logAudit(db, "BUSINESS_COLLECT", event, {amount: totalProfit}); return message.reply(`You collected a total of ${formatKMB(totalProfit)} from your businesses! It has been deposited into your bank.`); } return message.reply(`Invalid business command.`); }
            case "stock": {
                const stockAction = args[1]?.toLowerCase(); if (!stockAction) return message.reply(`Please specify a stock action.\nExample: ${p}bank stock market`);
                if (stockAction === 'market') { const page = parseInt(args[2]) || 1; const attachment = await drawStockMarketCanvas(page); return message.reply({ body: `Use '${p}bank stock market [page_number]' to navigate.`, attachment }, () => fs.unlink(attachment.path, ()=>{})); }
                const stockSymbol = args[2]?.toUpperCase(); if (!stockSymbol || (!stockMarket[stockSymbol] && stockAction !== 'portfolio')) return message.reply(`Invalid stock symbol.\nExample: ${p}bank stock price AAPL`);
                if (stockAction === 'price') return message.reply(`${stockMarket[stockSymbol].name} (${stockSymbol}): ${formatKMB(stockMarket[stockSymbol].price)}`);
                if (stockAction === 'portfolio') { const attachment = await drawStockPortfolioCanvas(userBankInfo, usersData, senderID, message); if (!attachment) return; return; }
                if (stockAction === 'chart') { if (!stockSymbol || !stockMarket[stockSymbol]) return message.reply("Invalid stock symbol."); return drawStockChart(stockSymbol, stockMarket[stockSymbol], message); }
                const stockShares = parseInt(args[3]); if (isNaN(stockShares) || stockShares <= 0) return message.reply(`Invalid number of shares.\nExample: ${p}bank stock buy AAPL 10`);
                if (stockAction === 'buy') { const stock = stockMarket[stockSymbol]; const stockPerks = getTierPerks((userBankInfo.bank + userCash)); const totalCost = (stock.price * stockShares) * (1 + (STOCK_TRANSACTION_FEE_PERCENT * stockPerks.feeModifier)); if (totalCost > userCash) return message.reply(`Insufficient cash. You need ${formatKMB(totalCost)}.`); await usersData.set(senderID, { money: userCash - totalCost }); userBankInfo.report.spent += totalCost; let holding = userBankInfo.stocks.find(s => s.symbol === stockSymbol); if (holding) { holding.avgBuyPrice = ((holding.avgBuyPrice * holding.shares) + (stock.price * stockShares)) / (holding.shares + stockShares); holding.shares += stockShares; } else { userBankInfo.stocks.push({ symbol: stockSymbol, shares: stockShares, avgBuyPrice: stock.price }); } await updateUserBankData(senderID, userBankInfo, db); return message.reply(`Successfully bought ${stockShares} shares of ${stockSymbol}.`); }
                if (stockAction === 'sell') { let holding = userBankInfo.stocks.find(s => s.symbol === stockSymbol); if (!holding || holding.shares < stockShares) return message.reply(`You don't have enough shares. You own ${holding ? holding.shares : 0} of ${stockSymbol}.`); const stockPerks = getTierPerks((userBankInfo.bank + userCash)); const proceeds = (stockMarket[stockSymbol].price * stockShares) * (1 - (STOCK_TRANSACTION_FEE_PERCENT * stockPerks.feeModifier)); await usersData.set(senderID, { money: userCash + proceeds }); userBankInfo.report.earned += proceeds; holding.shares -= stockShares; if (holding.shares === 0) userBankInfo.stocks = userBankInfo.stocks.filter(s => s.symbol !== stockSymbol); await updateUserBankData(senderID, userBankInfo, db); return message.reply(`Successfully sold ${stockShares} shares of ${stockSymbol} for ${formatKMB(proceeds)}.`); }
                return message.reply(`Invalid stock command.`);
            }
            default:
                message.reply(`Unknown command. Use '${p}bank help' to see the list of available commands.`);
        }
    }
};
